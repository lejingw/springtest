package com.lejingw.apps.myspring3.tx;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.sql.DataSource;

import junit.framework.Assert;

import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;
import org.springframework.transaction.support.TransactionTemplate;

import com.lejingw.apps.myspring3.tx.model.AddressModel;
import com.lejingw.apps.myspring3.tx.model.UserModel;
import com.lejingw.apps.myspring3.tx.service.IAddressService;
import com.lejingw.apps.myspring3.tx.service.IUserService;

public class TransactionTest {

	private static ApplicationContext ctx;
	private static PlatformTransactionManager txManager;
	private static DataSource dataSource;
	private static JdbcTemplate jdbcTemplate;

	// id自增主键从0开始
	private static final String CREATE_TABLE_SQL = "create table test"
			+ "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "name varchar(100))";
	private static final String DROP_TABLE_SQL = "drop table test";

	private static final String CREATE_USER_TABLE_SQL = "create table user"
			+ "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "name varchar(100))";
	private static final String DROP_USER_TABLE_SQL = "drop table user";

	private static final String CREATE_ADDRESS_TABLE_SQL = "create table address"
			+ "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "province varchar(100), city varchar(100), street varchar(100), user_id int)";
	private static final String DROP_ADDRESS_TABLE_SQL = "drop table address";

	private static final String INSERT_SQL = "insert into test(name) values(?)";
	private static final String COUNT_SQL = "select count(*) from test";

	@BeforeClass
	public static void setUpClass() {
		String[] configLocations = new String[] {
				"classpath:com/lejingw/apps/myspring3/jdbc/template/applicationContext-resources.xml",
				"classpath:com/lejingw/apps/myspring3/tx/applicationContext-jdbc.xml" };
		ctx = new ClassPathXmlApplicationContext(configLocations);
		txManager = ctx.getBean(PlatformTransactionManager.class);
		dataSource = ctx.getBean(DataSource.class);
		jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@Test
	public void testPlatformTransactionManagerForLowLevel1() {
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		TransactionStatus status = txManager.getTransaction(def);

		Connection conn = DataSourceUtils.getConnection(dataSource);
		try {
			conn.prepareStatement(CREATE_TABLE_SQL).execute();
			PreparedStatement pstmt = conn.prepareStatement(INSERT_SQL);
			pstmt.setString(1, "test");
			pstmt.execute();
			conn.prepareStatement(DROP_TABLE_SQL).execute();
			txManager.commit(status);
		} catch (Exception e) {
			status.setRollbackOnly();
			txManager.rollback(status);
		} finally {
			DataSourceUtils.releaseConnection(conn, dataSource);
		}
	}

	@Test
	public void testPlatformTransactionManagerForLowLevel2() {
		String[] configLocations = new String[] {
				"classpath:com/lejingw/apps/myspring3/jdbc/template/applicationContext-resources.xml",
				"classpath:com/lejingw/apps/myspring3/tx/applicationContext-jdbc2.xml" };
		ApplicationContext ctx2 = new ClassPathXmlApplicationContext(
				configLocations);
		DataSource dataSourceProxy = ctx2.getBean("dataSourceProxy",
				DataSource.class);

		Connection conn = null;
		try {
			conn = dataSourceProxy.getConnection();
			conn.prepareStatement(CREATE_TABLE_SQL).execute();
			PreparedStatement pstmt = conn.prepareStatement(INSERT_SQL);
			pstmt.setString(1, "test");
			pstmt.execute();
			conn.prepareStatement(DROP_TABLE_SQL).execute();
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
			}
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}

	}

	@Test
	public void testPlatformTransactionManagerForHighLevel() {
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

		TransactionStatus status = txManager.getTransaction(def);
		jdbcTemplate.execute(CREATE_TABLE_SQL);
		try {
			jdbcTemplate.update(INSERT_SQL, "test");
			txManager.commit(status);
		} catch (RuntimeException e) {
			txManager.rollback(status);
		}
		jdbcTemplate.execute(DROP_TABLE_SQL);
	}

	@Test
	public void testTransactionTemplate() {
		jdbcTemplate.execute(CREATE_TABLE_SQL);

		TransactionTemplate transactionTemplate = new TransactionTemplate(
				txManager);
		transactionTemplate
				.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);
		transactionTemplate
				.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

		transactionTemplate.execute(new TransactionCallbackWithoutResult() {
			@Override
			protected void doInTransactionWithoutResult(TransactionStatus status) {
				jdbcTemplate.update(INSERT_SQL, "test");
			}
		});

		jdbcTemplate.execute(DROP_TABLE_SQL);
	}

	@Test
	public void testJtaTransactionTemplate() {
		String[] configLocations = new String[] { "classpath:com/lejingw/apps/myspring3/tx/applicationContext-jta-derby.xml" };
		ApplicationContext ctx2 = new ClassPathXmlApplicationContext(
				configLocations);

		final PlatformTransactionManager jtaTXManager = ctx2
				.getBean(PlatformTransactionManager.class);
		TransactionTemplate transactionTemplate = new TransactionTemplate(
				jtaTXManager);
		transactionTemplate
				.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);

		final JdbcTemplate jdbcTemplate1 = new JdbcTemplate(ctx2.getBean(
				"dataSource1", DataSource.class));
		final JdbcTemplate jdbcTemplate2 = new JdbcTemplate(ctx2.getBean(
				"dataSource2", DataSource.class));

		jdbcTemplate1.update(CREATE_TABLE_SQL);
		int originalCount = jdbcTemplate1.queryForObject(COUNT_SQL,
				Integer.class);
		try {
			transactionTemplate.execute(new TransactionCallbackWithoutResult() {
				@Override
				protected void doInTransactionWithoutResult(
						TransactionStatus status) {
					jdbcTemplate1.update(INSERT_SQL, "test");
					// 因为数据库2没有创建数据库表因此会回滚事务
					jdbcTemplate2.update(INSERT_SQL, "test");
				}
			});
		} catch (RuntimeException e) {
			int count = jdbcTemplate1.queryForObject(COUNT_SQL, Integer.class);
			Assert.assertEquals(originalCount, count);
		}
		jdbcTemplate1.update(DROP_TABLE_SQL);
	}

	@Test
	public void testServiceTransaction() {
		String[] configLocations = new String[] {
				"classpath:com/lejingw/apps/myspring3/jdbc/template/applicationContext-resources.xml",
				"classpath:com/lejingw/apps/myspring3/tx/dao/applicationContext-jdbc.xml",
				"classpath:com/lejingw/apps/myspring3/tx/service/applicationContext-service.xml" };
		ApplicationContext ctx2 = new ClassPathXmlApplicationContext(
				configLocations);

		JdbcTemplate jdbcTemplate2 = new JdbcTemplate(
				ctx2.getBean(DataSource.class));

		jdbcTemplate2.update(CREATE_USER_TABLE_SQL);
		jdbcTemplate2.update(CREATE_ADDRESS_TABLE_SQL);

		IUserService userService = ctx2.getBean("userService",
				IUserService.class);
		IAddressService addressService = ctx2.getBean("addressService",
				IAddressService.class);

		UserModel user = createDefaultUserModel();
		userService.save(user);
		userService.save(user);

		Assert.assertEquals(2, userService.countAll());
		Assert.assertEquals(2, addressService.countAll());

		jdbcTemplate2.update(DROP_USER_TABLE_SQL);
		jdbcTemplate2.update(DROP_ADDRESS_TABLE_SQL);
	}

	private UserModel createDefaultUserModel() {
		UserModel user = new UserModel();
		user.setName("test");
		AddressModel address = new AddressModel();
		address.setProvince("beijing");
		address.setCity("beijing");
		address.setStreet("haidian");
		user.setAddress(address);
		return user;
	}

}
