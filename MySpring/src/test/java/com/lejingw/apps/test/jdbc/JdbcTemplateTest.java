package com.lejingw.apps.test.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.CallableStatementCreator;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnResultSet;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import com.lejingw.apps.myspring.jdbc.UserModel;
import com.lejingw.apps.myspring.jdbc.UserRowMapper;

public class JdbcTemplateTest {
	private static JdbcTemplate jdbcTemplate;

	@BeforeClass
	public static void setUpClass() {
		String url = "jdbc:hsqldb:mem:test";
		String username = "sa";
		String password = "";
		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@Before
	public void setUp() {
		String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
				+ "name varchar(100))";
		jdbcTemplate.update(createTableSql);

		String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) "
				+ "returns INT begin atomic return length(str);end";
		jdbcTemplate.update(createHsqldbFunctionSql);
		String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST"
				+ "(INOUT inOutName VARCHAR(100), OUT outId INT) " + "MODIFIES SQL DATA " + "BEGIN ATOMIC "
				+ "  insert into test(name) values (inOutName); " + "  SET outId = IDENTITY(); "
				+ "  SET inOutName = 'Hello,' + inOutName; " + "END";
		jdbcTemplate.execute(createHsqldbProcedureSql);
	}

	@After
	public void tearDown() {
		jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
		jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
		String dropTableSql = "drop table test";
		jdbcTemplate.execute(dropTableSql);
	}

	// @Test
	public void test() {
		// 1.声明SQL
		String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
		jdbcTemplate.query(sql, new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// 2.处理结果集
				String value = rs.getString("TABLE_NAME");
				System.out.println("Column TABLENAME:" + value);
			}
		});
	}

	@Test
	public void testCURD() {
		insert();
		delete();
		update();
		select();
	}

	private void insert() {
		jdbcTemplate.update("insert into test(name) values('name1')");
		jdbcTemplate.update("insert into test(name) values('name2')");
		Assert.assertEquals(2, jdbcTemplate.queryForInt("select count(*) from test"));
	}

	private void delete() {
		jdbcTemplate.update("delete from test where name=?", new Object[] { "name2" });
		Assert.assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test"));
	}

	private void update() {
		jdbcTemplate.update("update test set name='name3' where name=?", new Object[] { "name1" });
		Assert.assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test where name='name3'"));
	}

	private void select() {
		jdbcTemplate.query("select * from test", new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				System.out.print("====id:" + rs.getInt("id"));
				System.out.println(",name:" + rs.getString("name"));
			}
		});
	}

	@Test
	public void testPpreparedStatement1() {
		int count = jdbcTemplate.execute(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {
				return conn.prepareStatement("select count(*) from test");
			}
		}, new PreparedStatementCallback<Integer>() {
			@Override
			public Integer doInPreparedStatement(PreparedStatement pstmt) throws SQLException, DataAccessException {
				pstmt.execute();
				ResultSet rs = pstmt.getResultSet();
				rs.next();
				return rs.getInt(1);
			}
		});
		Assert.assertEquals(0, count);
	}

	@Test
	public void testPreparedStatement2() {
		String insertSql = "insert into test(name) values (?)";
		int count = jdbcTemplate.update(insertSql, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement pstmt) throws SQLException {
				pstmt.setObject(1, "name4");
			}
		});
		Assert.assertEquals(1, count);
		String deleteSql = "delete from test where name=?";
		count = jdbcTemplate.update(deleteSql, new Object[] { "name4" });
		Assert.assertEquals(1, count);
	}

	@Test
	public void testResultSet1() {
		jdbcTemplate.update("insert into test(name) values('name5')");
		String listSql = "select * from test";
		List result = jdbcTemplate.query(listSql, new RowMapper<Map>() {
			@Override
			public Map mapRow(ResultSet rs, int rowNum) throws SQLException {
				Map row = new HashMap();
				row.put(rs.getInt("id"), rs.getString("name"));
				return row;
			}
		});
		Assert.assertEquals(1, result.size());
		jdbcTemplate.update("delete from test where name='name5'");
	}

	@Test
	public void testResultSet2() {
		jdbcTemplate.update("insert into test(name) values('name5')");
		String listSql = "select * from test";
		final List result = new ArrayList();
		jdbcTemplate.query(listSql, new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				Map row = new HashMap();
				row.put(rs.getInt("id"), rs.getString("name"));
				result.add(row);
			}
		});
		Assert.assertEquals(1, result.size());
		jdbcTemplate.update("delete from test where name='name5'");
	}

	@Test
	public void testResultSet3() {
		jdbcTemplate.update("insert into test(name) values('name5')");
		String listSql = "select * from test";
		List result = jdbcTemplate.query(listSql, new ResultSetExtractor<List>() {
			@Override
			public List extractData(ResultSet rs) throws SQLException, DataAccessException {
				List result = new ArrayList();
				while (rs.next()) {
					Map row = new HashMap();
					row.put(rs.getInt("id"), rs.getString("name"));
					result.add(row);
				}
				return result;
			}
		});
		Assert.assertEquals(1, result.size());
		jdbcTemplate.update("delete from test where name='name5'");
	}

	public void test1() {
		// 1.查询一行数据并返回int型结果
		jdbcTemplate.queryForInt("select count(*) from test");
		// 2. 查询一行数据并将该行数据转换为Map返回
		jdbcTemplate.queryForMap("select * from test where name='name5'");
		// 3.查询一行任何类型的数据，最后一个参数指定返回结果类型
		jdbcTemplate.queryForObject("select count(*) from test", Integer.class);
		// 4.查询一批数据，默认将每行数据转换为Map
		jdbcTemplate.queryForList("select * from test");
		// 5.只查询一列数据列表，列类型是String类型，列名字是name
		jdbcTemplate.queryForList("select name from test where name=?", new Object[] { "name5" }, String.class);
		// 6.查询一批数据，返回为SqlRowSet，类似于ResultSet，但不再绑定到连接上
		SqlRowSet rs = jdbcTemplate.queryForRowSet("select * from test");
	}

	@Test
	public void testCallableStatementCreator1() {
		final String callFunctionSql = "{call FUNCTION_TEST(?)}";
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		params.add(new SqlParameter(Types.VARCHAR));
		params.add(new SqlReturnResultSet("result", new ResultSetExtractor<Integer>() {
			@Override
			public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
				while (rs.next()) {
					return rs.getInt(1);
				}
				return 0;
			}
		}));
		Map<String, Object> outValues = jdbcTemplate.call(new CallableStatementCreator() {
			@Override
			public CallableStatement createCallableStatement(Connection conn) throws SQLException {
				CallableStatement cstmt = conn.prepareCall(callFunctionSql);
				cstmt.setString(1, "test");
				return cstmt;
			}
		}, params);
		Assert.assertEquals(4, outValues.get("result"));
	}

	@Test
	public void testCallableStatementCreator3() {
		final String callProcedureSql = "{call PROCEDURE_TEST(?, ?)}";
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		params.add(new SqlInOutParameter("inOutName", Types.VARCHAR));
		params.add(new SqlOutParameter("outId", Types.INTEGER));
		Map<String, Object> outValues = jdbcTemplate.call(new CallableStatementCreator() {
			@Override
			public CallableStatement createCallableStatement(Connection conn) throws SQLException {
				CallableStatement cstmt = conn.prepareCall(callProcedureSql);
				cstmt.registerOutParameter(1, Types.VARCHAR);
				cstmt.registerOutParameter(2, Types.INTEGER);
				cstmt.setString(1, "test");
				return cstmt;
			}
		}, params);
		Assert.assertEquals("Hello,test", outValues.get("inOutName"));
		Assert.assertEquals(0, outValues.get("outId"));
	}

	@Test
	public void testNamedParameterJdbcTemplate1() {
		NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
		// namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
		namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
		String insertSql = "insert into test(name) values(:name)";
		String selectSql = "select * from test where name=:name";
		String deleteSql = "delete from test where name=:name";
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("name", "name5");
		namedParameterJdbcTemplate.update(insertSql, paramMap);
		
		final List<Integer> result = new ArrayList<Integer>();
		namedParameterJdbcTemplate.query(selectSql, paramMap, new RowCallbackHandler() {
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				result.add(rs.getInt("id"));
			}
		});
		Assert.assertEquals(1, result.size());
		
		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		namedParameterJdbcTemplate.update(deleteSql, paramSource);
	}

	@Test
	public void testNamedParameterJdbcTemplate2() {
		NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
		namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
		
		UserModel model = new UserModel();
		model.setMyName("name5");
		
		String insertSql = "insert into test(name) values(:myName)";
		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(model);
		namedParameterJdbcTemplate.update(insertSql, paramSource);
	}

	@Test
	public void testSimpleJdbcTemplate() {
		// 还支持DataSource和NamedParameterJdbcTemplate作为构造器参数
		SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(jdbcTemplate);
		
		String insertSql = "insert into test(id, name) values(?, ?)";
		simpleJdbcTemplate.update(insertSql, 10, "name5");
		
		String selectSql = "select * from test where id=? and name=?";
		List<Map<String, Object>> result = simpleJdbcTemplate.queryForList(selectSql, 10, "name5");
		Assert.assertEquals(1, result.size());
		
		RowMapper<UserModel> mapper = new UserRowMapper();
		List<UserModel> result2 = simpleJdbcTemplate.query(selectSql, mapper, 10, "name5");
		Assert.assertEquals(1, result2.size());
	}

	//@Test
	public void testCallableStatementCreator2() {
		JdbcTemplate mysqlJdbcTemplate = new JdbcTemplate(getMysqlDataSource());
		// 2.创建自定义函数
		String createFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str VARCHAR(100)) "
				+ "returns INT return LENGTH(str)";
		String dropFunctionSql = "DROP FUNCTION IF EXISTS FUNCTION_TEST";
		mysqlJdbcTemplate.update(dropFunctionSql);
		mysqlJdbcTemplate.update(createFunctionSql);
		// 3.准备sql,mysql支持{?= call …}
		final String callFunctionSql = "{?= call FUNCTION_TEST(?)}";
		// 4.定义参数
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		params.add(new SqlOutParameter("result", Types.INTEGER));
		params.add(new SqlParameter("str", Types.VARCHAR));
		
		Map<String, Object> outValues = mysqlJdbcTemplate.call(new CallableStatementCreator() {
			@Override
			public CallableStatement createCallableStatement(Connection conn) throws SQLException {
				CallableStatement cstmt = conn.prepareCall(callFunctionSql);
				cstmt.registerOutParameter(1, Types.INTEGER);
				cstmt.setString(2, "test");
				return cstmt;
			}
		}, params);
		Assert.assertEquals(4, outValues.get("result"));
	}

	public DataSource getMysqlDataSource() {
		String url = "jdbc:mysql://localhost:3306/test";
		DriverManagerDataSource dataSource = new DriverManagerDataSource(url, "root", "");
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		return dataSource;
	}
}